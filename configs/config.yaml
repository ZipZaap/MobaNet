---
# =====================================================
# DIRECTORIES
# =====================================================
DATASET_DIR: 
  value: 'D:/DataStorage/SemSeg/ver1/train'
  type: str
  hint: 'Path to the dataset folder'

RESULTS_DIR: 
  value: 'saved'
  type: str
  hint: 'Path to the output folder'

# =====================================================
# RUN CONFIGURATION
# =====================================================
MODEL: 
  value: UNet
  type: str
  options: ['AuxNet-ED', 'AuxNet-EDC', 'AuxNet-C', 'AuxNet-D', 'UNet', 'ClsCNN']
  hint: 'Type of model to be trained'

PT_WEIGHTS:
  value: null
  type: str
  hint: 'Name of the pretrained weights file (wihout the .pth extension)'

# EXPORT_LAYERS:
#   value: []
#   type: list
#   options: ['encoder', 'clshead', 'seghead']
#   hint: 'List of layers to be loaded from the pretrained model'

# FREEZE_LAYERS:
#   value: ['clshead']
#   type: list
#   options: ['encoder', 'clshead', 'seghead']
#   hint: 'List of layers to be frozen during training'

# =====================================================
# DATASET PARAMETERS
# =====================================================
SEED:
  value: 42
  type: int
  hint: 'Random seed for the dataset split'

TRAIN_SET_COMPOSITION: 
  value: full
  type: str
  options: ['full', 'boundary']
  hint: 'Training dataset composition; "full" for unfiltered dataset, "boundary" for images containing boundaries'

TEST_SET_COMPOSITION:
  value: full
  type: str
  options: ['full', 'boundary']
  hint: 'Testing dataset composition; "full" for unfiltered dataset, "boundary" for images containing boundaries'

TEST_SPLIT:
  value: 0.15
  type: float
  hint: 'Fraction of the dataset to be used as a test set'

CROSS_VALIDATION:
  value: False
  type: bool
  hint: 'Whether to perform K-fold cross-validation'

DEFAULT_FOLD:
  value: 0
  type: int
  hint: 'Default fold to use if cross-validation is disabled'

NUM_WORKERS:
  value: 1
  type: int
  hint: 'Number of subprocesses to use in PyTorch DataLoader. If set to 0, data loading occurs in the main process'

# =====================================================
# MODEL CONFIGURATION
# =====================================================
INPUT_IMAGE_SIZE:
  value: 512
  type: int
  hint: 'Size of the input image'

NUM_CHANNELS: 
  value: 1
  type: int
  hint: 'Number of channels in the input image'

NUM_LAYERS:
  value: 5
  type: int
  hint: 'Number of horizontal layers (or distinct resolution levels) in a UNet including the bottleneck'

L1_DEPTH:
  value: 16
  type: int
  hint: 'Feature depth of the Conv2D blocks in the 1st layer; this number is doubled with each downsampling stage'

BATCH_SIZE:
  value: 16
  type: int
  hint: 'Batch size for training'

# --- Segmentation Branch --- #
SEG_CLASSES:
  value: 1
  type: int
  hint: 'Number of classes in the segmentation task'

SEG_DROPOUT:
  value: 0.1
  type: float
  hint: 'Dropout value for the decoder/encoder in segmentation branch'

SEG_THRESHOLD:
  value: 0.5
  type: float
  hint: 'Segmentation threshold; pixel values above this are set to 1'


# --- Classification Branch --- #
CLS_CLASSES:
  value: 3
  type: int
  hint: 'Number of classes in the classification task'

CLS_DROPOUT:
  value: 0.3
  type: float
  hint: 'Dropout value for the classification head'

CLS_THRESHOLD:
  value: 0.7
  type: float
  hint: 'Classification threshold; only probabilities above this yield a positive classification'

# =====================================================
# OPTIMIZER SETTINGS
# =====================================================
INIT_LR:
  value: 0.00001
  type: float
  hint: 'Initial learning rate at the beginning of the warmup'

BASE_LR:
  value: 0.0001
  type: float
  hint: 'Base learning rate reached after the warmup'

L2_DECAY:
  value: 0.00001
  type: float
  hint: 'L2 regularization decay'

WARMUP_EPOCHS:
  value: 10
  type: int
  hint: 'Number of warmup epochs to reach BASE_LR'

TRAIN_EPOCHS:
  value: 400
  type: int
  hint: 'Number of training epochs, excluding the warmup'

# =====================================================
# SIGNED DISTANCE MAP (SDM) PARAMETERS
# =====================================================
SDM_KERNEL_SIZE: 
  value: 7
  type: int
  hint: 'Kernel size for SDM'

SDM_KERNEL_TYPE:
  value: 'chebyshev'
  type: str
  options: ['manhattan', 'chebyshev', 'euclidean']
  hint: 'Type of kernel used to calculate the SDM'

SDM_NORMALIZATION:
  value: 'minmax'
  type: str
  options: ['minmax', 'static_max', 'dynamic_max']
  hint: 'Normalization type for the SDM kernel'

# =====================================================
# LOSS CONFIGURATION
# =====================================================
LOSS:
  value: 'DICE_BCE'
  type: str
  options: ['DICE_BCE']
  hint: 'Loss function used to train the model'

INCLUDE_BACKGROUND:
  value: True
  type: bool
  hint: 'Consider the background class in the loss function'

ADAPTIVE_WEIGHTS:
  value: False
  type: bool
  hint: 'Automatically balance contributions of loss components if combined loss is used'

WEIGHTS:
  value: null
  type: list
  hint: 'Static weights for the loss components; Only used if ADAPTIVE_WEIGHTS is False'

CLAMP_DELTA:
  value: 0.2
  type: float
  hint: 'Clamping delta applied to the SDM kernel when calculating ClampedMAE'

SIGMOID_STEEPNESS:
  value: 1000
  type: int
  hint: 'Determines the steepness of the sigmoid in HardDiceLoss'

# =====================================================
# SAVE SETTINGS
# =====================================================
SAVE_MODEL:
  value: True
  type: bool
  hint: 'Whether to save the trained model'

SAVE_METRIC:
  value: 'DSC'
  type: str
  options: ['TTR', 'CMA', 'DSC', 'IoU', 'ASD', 'AD', 'HD95', 'D95']
  hint: 'Metric to choose the best epoch during training'

# =====================================================
# DISTRIBUTED DATA PARALLEL (DDP)
# =====================================================
GPUs:
  value: [0]
  type: list
  hint: 'List of GPUs for distributed training'

MASTER_ADDR:
  value: 'localhost'
  type: str
  hint: 'Master node address'

MASTER_PORT:
  value: '12355'
  type: str
  hint: 'Master node port for DDP communication'

NCCL_P2P_DISABLE:
  value: False
  type: bool
  hint: 'Disable peer-to-peer communication for DDP; This might help if you encounter issues with DDP'

# =====================================================
# LOGGER SETTINGS
# =====================================================
LOG_WANDB:
  value: True
  type: bool
  hint: 'Enable logging to Weights and Biases'

LOG_LOCAL:
  value: True
  type: bool
  hint: 'Enable saving logs locally'

EXP_ID:
  value: 'merged'
  type: str
  hint: 'Experiment identifier'

RUN_ID:
  value: 'DICE_BCE_IoU'
  type: str
  hint: 'Run identifier'

# =====================================================
# OPTIONAL (Commented Out)
# =====================================================
# Uncomment the following if needed:
#
# FOLD_ID:
#   value: 2
#   type: int
#   hint: 'Which fold to use if cross-validation is disabled'
#
# IMAGE CONFIGURATION:
# INPUT_IMAGE_PATH: 
#   value: 'D:/DataStorage/SemSeg/ver1/test'
#   type: str
#   hint: 'Path to the input image folder'
#
# BOUNDARY:
#   value: False
#   type: bool
#   hint: 'Flag for classification mask'